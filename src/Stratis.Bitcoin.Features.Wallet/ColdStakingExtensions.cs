using System;
using System.Collections.Generic;
using System.Linq;
using NBitcoin;
using Stratis.Bitcoin.Features.Wallet.Interfaces;

namespace Stratis.Bitcoin.Features.Wallet
{
    /// <summary>
    /// Extension class for providing cold-staking-related methods.
    /// </summary>
    public static class ColdStakingExtensions
    {
        /// <summary>
        /// Gets a cold staking account. Creates the account if it does not exist.
        /// </summary>
        /// <param name="wallet">The wallet.</param>
        /// <param name="walletPassword">The wallet password.</param>
        /// <param name="isColdWalletAccount">Indicates whether we need the cold wallet account (versus the hot wallet account).</param>
        /// <param name="createIfNotExists">Indicates whether to create the account if it does not exist.</param>
        /// <returns>The cold staking account.</returns>
        public static HdAccount GetColdStakingAccount(this Wallet wallet, string walletPassword,
            bool isColdWalletAccount, bool createIfNotExists = true)
        {
            int accountIndex = isColdWalletAccount ? Wallet.ColdWalletAccountIndex : Wallet.HotWalletAccountIndex;

            CoinType coinType = (CoinType)wallet.Network.Consensus.CoinType;

            HdAccount account = wallet.GetAccountsByCoinType(coinType).Where(a => a.Index == accountIndex).FirstOrDefault();

            if (account == null)
            {
                if (!createIfNotExists)
                    return null;

                AccountRoot accountRoot = wallet.AccountsRoot.Single(a => a.CoinType == coinType);

                account = accountRoot.CreateAccount(walletPassword, wallet.EncryptedSeed,
                    wallet.ChainCode, wallet.Network, DateTimeOffset.UtcNow, accountIndex);

                ICollection<HdAccount> hdAccounts = accountRoot.Accounts.ToList();
                hdAccounts.Add(account);
                accountRoot.Accounts = hdAccounts;
            }

            if (account.ExternalAddresses.Count == 0)
                account.CreateAddresses(wallet.Network, 1, false);

            return account;
        }

        /// <summary>
        /// Gets a cold staking address.
        /// </summary>
        /// <param name="wallet">The wallet.</param>
        /// <param name="walletPassword">The wallet password.</param>
        /// <param name="isColdWalletAddress">Indicates whether we need the cold wallet address (versus the hot wallet address).</param>
        /// <returns>The cold staking address.</returns>
        public static HdAddress GetColdStakingAddress(this Wallet wallet, string walletPassword, bool isColdWalletAddress)
        {
            return GetColdStakingAccount(wallet, walletPassword, isColdWalletAddress).ExternalAddresses.First();
        }

        /// <summary>
        /// Creates a cold staking script.
        /// </summary>
        /// <param name="hotPubKey">The "hotPubKey" to use.</param>
        /// <param name="coldPubKey">The "coldPubKey" to use.</param>
        /// <returns>The cold staking script.</returns>
        private static Script GetColdStakingScript(ScriptId hotPubKey, ScriptId coldPubKey)
        {
            return new Script(OpcodeType.OP_DUP, OpcodeType.OP_HASH160, OpcodeType.OP_ROT,
                OpcodeType.OP_IF, OpcodeType.OP_CHECKCOLDSTAKEVERIFY,
                Op.GetPushOp(hotPubKey.ToBytes()),
                OpcodeType.OP_ELSE,
                Op.GetPushOp(coldPubKey.ToBytes()),
                OpcodeType.OP_ENDIF,
                OpcodeType.OP_EQUALVERIFY, OpcodeType.OP_CHECKSIG);
        }

        /// <summary>
        /// Creates a <see cref="TransactionBuildContext"/> for creating a cold staking setup transaction.
        /// </summary>
        /// <param name="walletManager">The wallet manager.</param>
        /// <param name="coldWalletAddress">The cold wallet address generated by <see cref="GetColdStakingAddress(IWalletManager, CoinType, string, string, bool)"/></param>
        /// <param name="hotWalletAddress">The hot wallet address generated by <see cref="GetColdStakingAddress(IWalletManager, CoinType, string, string, bool)"/></param>
        /// <param name="walletName">The name of the wallet.</param>
        /// <param name="walletAccount">The wallet account.</param>
        /// <param name="walletPassword">The wallet password.</param>
        /// <param name="amount">The amount to cold stake.</param>
        /// <param name="feeAmount">The fee to pay for the cold staking setup transaction.</param>
        /// <returns>The <see cref="TransactionBuildContext"/> for creating the cold staking setup transaction.</returns>
        public static TransactionBuildContext GetSetupBuildContext(this IWalletManager walletManager,
            string coldWalletAddress, string hotWalletAddress, string walletName, string walletAccount,
            string walletPassword,  Money amount, Money feeAmount)
        {
            Wallet wallet = walletManager.GetWalletByName(walletName);
            CoinType coinType = (CoinType)wallet.Network.Consensus.CoinType;
            HdAccount coldAccount = wallet.GetColdStakingAccount(walletPassword, true, false);
            HdAccount hotAccount = wallet.GetColdStakingAccount(walletPassword, false, false);

            bool thisIsColdWallet = coldAccount?.ExternalAddresses.Select(a => a.Address).Contains(coldWalletAddress) ?? false;
            bool thisIsHotWallet = hotAccount?.ExternalAddresses.Select(a => a.Address).Contains(hotWalletAddress) ?? false;

            if (thisIsColdWallet && thisIsHotWallet)
                throw new WalletException("You can't use this wallet as both hot wallet and cold wallet.");

            if (!thisIsColdWallet && !thisIsHotWallet)
                throw new WalletException("The hot and cold wallet addresses could not be found in the corresponding accounts.");

            ScriptId hotPubKey = BitcoinAddress.Create(hotWalletAddress, wallet.Network).ScriptPubKey.Hash;
            ScriptId coldPubKey = BitcoinAddress.Create(coldWalletAddress, wallet.Network).ScriptPubKey.Hash;
            Script destination = GetColdStakingScript(hotPubKey, coldPubKey);

            // Only normal accounts should be allowed.
            if (walletManager.GetAccounts(walletName).Where(a => a.Name == walletAccount).Single().Index >= Wallet.ColdWalletAccountIndex)
                throw new WalletException($"You can't perform this operation with wallet account '{ walletAccount }'");

            return new TransactionBuildContext(wallet.Network)
            {
                AccountReference = new WalletAccountReference(walletName, walletAccount),
                TransactionFee = feeAmount,
                MinConfirmations = 0,
                Shuffle = true,
                OpReturnData = (thisIsHotWallet?hotPubKey:coldPubKey).ToString(),
                WalletPassword = walletPassword,
                Recipients = new[] { new Recipient { Amount = amount, ScriptPubKey = destination } }.ToList()
            };
        }
    }
}
